<?php

namespace Cole\IntranetBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CursaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CursaRepository extends EntityRepository
{

	public function findTareasEvaluadas($grupo, $asignatura)
	{
		return $this->getEntityManager()->createQuery(
			'SELECT c FROM IntranetBundle:Cursa c INNER JOIN c.tarea t WHERE t.grupo=:grupo AND t.asignatura=:asignatura  
			AND c.nota IS NOT NULL AND t.descripcion not like :descripcion AND t.trimestre is not null GROUP BY c.tarea ORDER BY t.fecha DESC')
			->setParameters(array(
			'grupo' => $grupo,
			'asignatura' => $asignatura,
			'descripcion'=>"Evaluación_Trimestral"))
			->getResult();
	}

	public function findTareasNoEvaluadas($grupo, $asignatura)
	{
		return $this->getEntityManager()->createQuery(
			'SELECT c FROM IntranetBundle:Cursa c INNER JOIN c.tarea t WHERE t.grupo=:grupo AND t.asignatura=:asignatura  AND c.nota IS NULL 
			AND t.descripcion not like :descripcion AND t.trimestre is not null AND c.tarea NOT IN(select tarea FROM IntranetBundle:Cursa cur INNER JOIN cur.tarea tarea WHERE tarea.grupo=:grupo AND tarea.asignatura=:asignatura  
			AND cur.nota IS NOT NULL AND tarea.descripcion not like :descripcion AND tarea.trimestre is not null) GROUP BY c.tarea ORDER BY t.fecha DESC')
			->setParameters(array(
			'grupo' => $grupo,
			'asignatura' => $asignatura,
			'descripcion'=>"Evaluación_Trimestral"))
			->getResult();
	}

	public function findByAlumnoTrimestre($alumno, $trimestre)
	{
		return $this->getEntityManager()->createQuery(
			'SELECT c FROM IntranetBundle:Cursa c INNER JOIN c.tarea t WHERE c.alumno=:alumno AND t.trimestre=:trimestre AND t.descripcion=:descripcion ORDER BY t.fecha DESC')
			->setParameters(array(
			'alumno' => $alumno,
			'trimestre' => $trimestre,
			'descripcion'=>"Evaluación_Trimestral"))
		->setMaxResults(1)
		->getOneOrNullResult();
	}

	public function findByAsignacionesTrimestre($grupo, $asignatura, $trimestre)
	{
		return $this->getEntityManager()->createQuery(
			'SELECT c FROM IntranetBundle:Cursa c INNER JOIN c.tarea t WHERE t.grupo=:grupo AND t.asignatura=:asignatura  
			AND t.trimestre=:trimestre AND t.descripcion=:descripcion ORDER BY t.fecha DESC')
			->setParameters(array(
			'grupo' => $grupo,
			'asignatura' => $asignatura,
			'trimestre' => $trimestre,
			'descripcion' => "Evaluación_Trimestral"))
			->getResult();
	}

	public function findByTareasAlumnoTrimestre($alumno, $trimestre)
	{
		return $this->getEntityManager()->createQuery(
			'SELECT c FROM IntranetBundle:Cursa c INNER JOIN c.tarea t WHERE c.alumno=:alumno AND t.trimestre=:trimestre AND t.descripcion not like :descripcion ORDER BY t.fecha DESC')
			->setParameters(array(
			'alumno' => $alumno,
			'trimestre' => $trimestre,
			'descripcion'=>"Evaluación_Trimestral"))
			->getResult();
	}


	public function findByTareasAlumnoAsignaturaTrimestre($alumno, $trimestre, $asignatura)
	{
		return $this->getEntityManager()->createQuery(
			'SELECT c FROM IntranetBundle:Cursa c INNER JOIN c.tarea t WHERE c.alumno=:alumno AND t.asignatura=:asignatura AND t.trimestre=:trimestre AND t.descripcion not like :descripcion ORDER BY t.fecha DESC')
			->setParameters(array(
			'alumno' => $alumno,
			'trimestre' => $trimestre,
			'asignatura' => $asignatura,
			'descripcion'=>"Evaluación_Trimestral"))
			->getResult();
	}

	public function findByNotasAlumnoTrimestre($alumno, $trimestre)
	{
		return $this->getEntityManager()->createQuery(
			'SELECT c FROM IntranetBundle:Cursa c INNER JOIN c.tarea t INNER JOIN c.asignaturasCursos a INNER JOIN a.asignatura asig WHERE c.alumno=:alumno AND t.trimestre=:trimestre AND t.descripcion=:descripcion ORDER BY t.trimestre ,asig.nombre DESC')
			->setParameters(array(
			'alumno' => $alumno,
			'trimestre' => $trimestre,
			'descripcion'=>"Evaluación_Trimestral"))
			->getResult();
	}

	public function findTareasAlumnoEvaluadas($alumno)
	{
		return $this->getEntityManager()->createQuery(
			'SELECT c FROM IntranetBundle:Cursa c INNER JOIN c.tarea t INNER JOIN c.asignaturasCursos a INNER JOIN a.asignatura asig WHERE c.alumno=:alumno AND t.descripcion not like :descripcion ORDER BY t.trimestre ,asig.nombre DESC')
			->setParameters(array(
			'alumno' => $alumno,
			'descripcion'=>"Evaluación_Trimestral"))
			->getResult();
	}

	public function findTareasAlumnoEvaluadasAsignatura($alumno, $asignatura)
	{
		return $this->getEntityManager()->createQuery(
			'SELECT c FROM IntranetBundle:Cursa c INNER JOIN c.tarea t INNER JOIN c.asignaturasCursos a INNER JOIN a.asignatura asig WHERE c.alumno=:alumno AND c.asignaturasCursos=:asignatura AND t.descripcion not like :descripcion ORDER BY t.trimestre ,asig.nombre DESC')
			->setParameters(array(
			'alumno' => $alumno,
			'asignatura' => $asignatura,
			'descripcion'=>"Evaluación_Trimestral"))
			->getResult();
	}

	public function findTareasAlumnoEvaluadasAgrupadas($alumno)
	{
		return $this->getEntityManager()->createQuery(
			'SELECT c FROM IntranetBundle:Cursa c INNER JOIN c.tarea t INNER JOIN c.asignaturasCursos a INNER JOIN a.asignatura asig WHERE c.alumno=:alumno AND t.descripcion not like :descripcion GROUP BY c.asignaturasCursos ORDER BY asig.nombre ASC')
			->setParameters(array(
			'alumno' => $alumno,
			'descripcion'=>"Evaluación_Trimestral"))
			->getResult();
	}

	public function findTareasAlumnoSinTrimestreActual($alumno, $trimestre)
	{
		return $this->getEntityManager()->createQuery(
			'SELECT c FROM IntranetBundle:Cursa c INNER JOIN c.tarea t INNER JOIN c.asignaturasCursos a INNER JOIN a.asignatura asig WHERE c.alumno=:alumno AND (t.descripcion not like :descripcion OR( t.descripcion=:descripcion AND t.trimestre not like :trimestre)) ORDER BY t.trimestre ,asig.nombre DESC')
			->setParameters(array(
			'alumno' => $alumno,
			'trimestre' => $trimestre,
			'descripcion'=>"Evaluación_Trimestral"))
			->getResult();
	}

	public function findTarea($tarea)
	{
		return $this->getEntityManager()->createQuery(
			'SELECT c FROM IntranetBundle:Cursa c INNER JOIN c.alumno a WHERE c.tarea=:tarea  ORDER BY a.apellido1, a.apellido2, a.nombre  ASC')
			->setParameters(array(
			'tarea' => $tarea))
			->getResult();
	}

}
